"""
请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
    数字 1-9 在每一行只能出现一次。
    数字 1-9 在每一列只能出现一次。
    数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

注意：
    一个有效的数独（部分已被填充）不一定是可解的。
    只需要根据以上规则，验证已经填入的数字是否有效即可。

输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true

输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

"""
from typing import List
from collections import Counter


class Soultion:

    # 我的题解
    """
    执行用时：76 ms, 在所有 Python3 提交中击败了6.70% 的用户
    内存消耗：14.9 MB, 在所有 Python3 提交中击败了66.57% 的用户
    """
    def isValidSudoku1(self, board: List[List[str]]) -> bool:
        for i in range(0, 9):
            # 每一行
            if not self.issingle(board[i]):
                return False
            # 每一列
            nums = []
            for j in range(0, 9):
                nums.append(board[j][i])
            if not self.issingle(nums):
                return False

        for i in (0, 3, 6):
            for j in (0, 3, 6):
                nums = []
                for ii in range(3):
                    for jj in range(3):
                        nums.append(board[i + ii][j + jj])
                if not self.issingle(nums):
                    return False

        return True

    # 判断9个数是否不重复
    def issingle(self, nums: List[str]) -> bool:
        hashmap = Counter(nums)
        for i in hashmap.keys():
            if i != '.' and hashmap[i] != 1:
                return False
        return True

    # 我实现的官方题解
    """
    执行用时：56 ms, 在所有 Python3 提交中击败了44.08% 的用户
    内存消耗：14.8 MB, 在所有 Python3 提交中击败了89.87% 的用户
    """
    def isValidSudoku(self, board: List[List[str]]) -> bool:

        # rows = [{}] * 9 这种方法会出错  例如[{'5': 1},{'5': 1},{'5': 1}]
        # 列表解析式方法
        rows = [{} for i in range(9)]
        columns = [{} for i in range(9)]        # [{}, {}, {}, {}, {}, {}, {}, {}, {}]
        box = [{} for i in range(9)]
        for i in range(9):
            for j in range(9):
                # 注意 / 和 // 的不同
                box_index = int((i // 3) * 3 + j // 3)     # 其中 / 是整数除法。
                if board[i][j] == '.':
                    continue
                elif board[i][j] in rows[i]:
                    return False
                elif board[i][j] in columns[j]:
                    return False
                elif board[i][j] in box[box_index]:
                    return False
                else:
                    # 造成这样的结果是因为两者的初始化不一样，我的天呀，原来是这样。
                    rows[i][board[i][j]] = 1    # 每一个字典都加入了，例如[{'5': 1},{'5': 1},{'5': 1}]
                    columns[j][board[i][j]] = 1     # 只是一个字典中加入了，
                    box[box_index][board[i][j]] = 1

        return True




board = [["5", "3", ".", ".", "7", ".", ".", ".", "."]
    , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
    , [".", "9", "8", ".", ".", ".", ".", "6", "."]
    , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
    , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
    , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
    , [".", "6", ".", ".", ".", ".", "2", "8", "."]
    , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
    , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

board1 = [["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]


s = Soultion()
print(s.isValidSudoku(board))
